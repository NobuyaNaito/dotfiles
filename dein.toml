# Configuration for vim plugins managed by dein.vim.
# Put this file in <~/.vim/bundles/>.

[[plugins]]
repo = "tpope/vim-fugitive"

[[plugins]]
repo = "itchyny/lightline.vim"
hook_add = '''
  let g:lightline = {
    \ "colorscheme": "myiceberg"
    \ }

  set laststatus=2
  set noshowmode
'''

[[plugins]]
repo = "ctrlpvim/ctrlp.vim"
hook_add = '''
  " # Add home directory to the roots.
  let g:ctrlp_root_markers = ["dotfiles"]

  " # Enable caching.
  let g:ctrlp_use_caching = 1

  " # Set cache directory.
  let g:ctrlp_cache_dir = $HOME . "/.cache/ctrlp"

  " # Do not clear cache when exiting vim.
  let g:ctrlp_clear_cache_on_exit = 0

  " # Scan for dotfiles and dotdirs.
  let g:ctrlp_show_hidden = 1

  " # Enable lazy update.
  let g:ctrlp_lazy_update = 150
'''

[[plugins]]
repo = "zeero/vim-ctrlp-help"
depends = ["ctrlpvim/ctrlp.vim"]
hook_add = '''
  " # Enable extension help.
  let g:ctrlp_extensions = ["help"]

  " # Add help to the core types.
  let g:ctrlp_types = ["mru","buf","fil","hlp"]
'''

[[plugins]]
repo = "thinca/vim-quickrun"
hook_add = '''
  " # Disable default key mapping.
  let g:quickrun_no_default_key_mappings = 1

  " # Short cut command.
  command! -nargs=* Run QuickRun <args>

  let g:quickrun_config = {}
  let g:quickrun_config = {
  \ "_": {
  \   "outputter": "quickfix"
  \ },
  \ "sh": {
  \   "type": "sh",
  \   "command": "sh"
  \ },
  \ "gp": {
  \   "type": "gp",
  \   "command": "gnuplot",
  \   "exec": "%c -p -e 'load " . '"%s"' . "'"
  \ }
  \ }
'''

#===============================================================================
#===============================================================================
# asyncomplete.vim

[[plugins]]
repo = "prabirshrestha/asyncomplete.vim"
hook_add = '''
  " # Avoid ins completion menu messages.
  set shortmess+=c

  " # Disable tag completion.
  set complete-=t

  " # Disable fuzzy match.
  let g:asyncomplete_smart_completion = 0

  " # Output log.
  " # let g:asyncomplete_log_file =

  " # Close completion menu when starting a new line.
  inoremap <expr> <RETURN> pumvisible() ? "<C-y><RETURN>" : "<RETURN>"
'''

[[plugins]]
repo = "prabirshrestha/asyncomplete-buffer.vim"
hook_add = '''
  autocmd vimrc User asyncomplete_setup call asyncomplete#register_source(
  \ asyncomplete#sources#buffer#get_source_options({
  \   "name": "buffer",
  \   "whitelist": ['*'],
  \   "priority": 4,
  \   "completor": function('asyncomplete#sources#buffer#completor'),
  \ })
  \ )
'''

[[plugins]]
repo = "prabirshrestha/asyncomplete-file.vim"
hook_add = '''
  autocmd vimrc User asyncomplete_setup call asyncomplete#register_source(
  \ asyncomplete#sources#file#get_source_options({
  \   "name": "file",
  \   "whitelist": ['*'],
  \   "priority": 8,
  \   "completor": function('asyncomplete#sources#file#completor'),
  \ })
  \ )
'''

[[plugins]]
repo = "prabirshrestha/asyncomplete-necosyntax.vim"
depends = ["neco-syntax"]
hook_add = '''
  autocmd vimrc User asyncomplete_setup call asyncomplete#register_source(
  \ asyncomplete#sources#necosyntax#get_source_options({
  \   "name": "necosyntax",
  \   "whitelist": ['*'],
  \   "priority": 2,
  \   "completor": function('asyncomplete#sources#necosyntax#completor'),
  \ })
  \ )
'''

[[plugins]]
repo = "prabirshrestha/asyncomplete-necovim.vim"
depends = ["neco-vim"]
hook_add = '''
  autocmd vimrc User asyncomplete_setup call asyncomplete#register_source(
  \ asyncomplete#sources#necovim#get_source_options({
  \   "name": "necovim",
  \   "whitelist": ['vim'],
  \   "priority": 6,
  \   "completor": function('asyncomplete#sources#necovim#completor'),
  \ })
  \ )
'''

[[plugins]]
repo = "prabirshrestha/asyncomplete-neosnippet.vim"
depends = ["neosnippet.vim"]
hook_add = '''
  autocmd vimrc User asyncomplete_setup call asyncomplete#register_source(
  \ asyncomplete#sources#neosnippet#get_source_options({
  \   "name": "neosnippet",
  \   "priority": 10,
  \   "whitelist": ['*'],
  \   "completor": function('asyncomplete#sources#neosnippet#completor'),
  \ })
  \ )
'''

#===============================================================================
#===============================================================================
# Completion sources.

[[plugins]]
repo = "Shougo/neco-syntax"

[[plugins]]
repo = "Shougo/neco-vim"

[[plugins]]
repo = "Shougo/neosnippet.vim"
hook_add = '''
  " # Disable default snippets.
  let g:neosnippet#disable_runtime_snippets = {
  \ "_": 1
  \ }

  let g:neosnippet#snippets_directory = "~/dotfiles/snippets/"
  command! Snip NeoSnippetEdit

  " # Plugin key-mappings.
  " # Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  imap <C-j> <Plug>(neosnippet_expand_or_jump)
  smap <C-j> <Plug>(neosnippet_expand_or_jump)
  xmap <C-j> <Plug>(neosnippet_expand_target)

  " # SuperTab like snippets behavior.
  " # Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  "# imap <expr><TAB>
  " # \ pumvisible() ? "\<C-n>" :
  " # \ neosnippet#expandable_or_jumpable() ?
  " # \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " # For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

#===============================================================================
#===============================================================================
# TOML syntax highlight.

# Detect code blocks and their filetypes.
[[plugins]]
repo = "Shougo/context_filetype.vim"
on_ft = "toml"

# Set the buffer filetype according to the context.
[[plugins]]
repo = "osyo-manga/vim-precious"
depends = ["context_filetype.vim"]
on_ft = "toml"

# Enable syntax highlight of filetype TOML.
[[plugins]]
repo = "cespare/vim-toml"
on_ft = "toml"

#===============================================================================
#===============================================================================
# Disabled plugins.

# Default snippets for neosnippet.vim.
[[plugins]]
repo = "Shougo/neosnippet-snippets"
lazy = 1

# Vim and lightline colorscheme: iceberg.
[[plugins]]
repo = "cocopon/iceberg.vim"
lazy = 1

#===============================================================================
#===============================================================================
# dein.vim

[[plugins]]
repo = "Shougo/dein.vim"
hook_add = '''
  " # Disable plugins. (NOT uninstalled)
  " # Delayed loading (lazy) is required.
  call dein#disable(["Shougo/neosnippet-snippets"])
  call dein#disable(["cocopon/iceberg.vim"])

  " # Update plugins.
  " # call dein#update()

  " # Uninstall commented out plugins.
  " # call map(dein#check_clean(),"delete(v:val,'rf')")
  " # call dein#recache_runtimepath()
'''
