# Lazy vim plugins managed by dein.vim.
# Put this file in <~/.vim/bundles/>.

[[plugins]]
repo = "tpope/vim-fugitive"
on_event = "VimEnter"

[[plugins]]
repo = "kana/vim-submode"
on_event = "VimEnter"
hook_source = '''
  " # Show current submode even if 'showmode' is disabled.
  let g:submode_always_show_submode = 1

  " # Unmapped keys are processed after leaving submode.
  let g:submode_keep_leaving_key = 1

  " # Time out on submode is disabled.
  let g:submode_timeout = 0

  " # Submode 'window'.
  call submode#enter_with("window","n","","<C-w>>","<C-w>>")
  call submode#enter_with("window","n","","<C-w><","<C-w><")
  call submode#enter_with("window","n","","<C-w>+","<C-w>+")
  call submode#enter_with("window","n","","<C-w>-","<C-w>-")
  call submode#map("window","n","",">","<C-w>>")
  call submode#map("window","n","","<","<C-w><")
  call submode#map("window","n","","+","<C-w>+")
  call submode#map("window","n","","-","<C-w>-")
'''

#===============================================================================
#===============================================================================
# ctrlp.vim

[[plugins]]
repo = "ctrlpvim/ctrlp.vim"
on_event = "VimEnter"
hook_source = '''
  " # Add home directory to the roots.
  let g:ctrlp_root_markers = ["dotfiles"]

  " # Enable caching.
  let g:ctrlp_use_caching = 1

  " # Set cache directory.
  let g:ctrlp_cache_dir = $HOME . "/.cache/ctrlp"

  " # Do not clear cache when exiting vim.
  let g:ctrlp_clear_cache_on_exit = 0

  " # Scan for dotfiles and dotdirs.
  let g:ctrlp_show_hidden = 1

  " # Enable lazy update.
  let g:ctrlp_lazy_update = 150

  " # Enable extension help.
  let g:ctrlp_extensions = ["help"]

  " # Set core types.
  let g:ctrlp_types = ["mru","buf","fil","hlp"]
'''

# CtrlP extension "help". 
[[plugins]]
repo = "zeero/vim-ctrlp-help"
on_event = "VimEnter"

#===============================================================================
#===============================================================================
# vim-quickrun

[[plugins]]
repo = "thinca/vim-quickrun"
on_cmd = "QuickRun"
hook_add = '''
  " # Short cut command.
  command! -nargs=* Run QuickRun <args>
'''
hook_source = '''
  " # Disable default key mapping.
  let g:quickrun_no_default_key_mappings = 1

  " # Stop quickrun sessions.
  nnoremap <expr><silent> <C-c>
  \ quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"

  let g:quickrun_config = {}
  let g:quickrun_config = {
  \ "_": {
  \   "outputter": "quickfix"
  \ },
  \ "sh": {
  \   "command": "sh",
  \   "runner": "vimscript",
  \   "outputter": "null",
  \   "exec": ":AsyncRun %c %S",
  \ },
  \
  \ "gp": {
  \   "type": "load",
  \ },
  \ "plot": {
  \   "command": "gnuplot",
  \   "runner": "vimscript",
  \   "outputter": "null",
  \   "exec": ':AsyncRun %c -p -e "plot ' . "'%S'" . '"'
  \ },
  \ "splot": {
  \   "command": "gnuplot",
  \   "runner": "vimscript",
  \   "outputter": "null",
  \   "exec": ':AsyncRun %c -p -e "splot ' . "'%S'" . '"'
  \ },
  \ "load": {
  \   "command": "gnuplot",
  \   "runner": "vimscript",
  \   "outputter": "null",
  \   "exec": ':AsyncRun %c -p -e "load ' . "'%S'" . '"'
  \ 
  \ },
  \ "c": {
  \   "type": "c/gcc",
  \ },
  \ "c/gcc": {
  \   "command": "gcc",
  \   "runner": "vimscript",
  \   "outputter": "null",
  \   "exec": [":AsyncRun %c %o %s -o %s:p:h/a.out ; %s:p:h/a.out %a"],
  \   "tempfile": "%{tempname()}.c",
  \ },
  \ 
  \ "fortran": {
  \   "type": "fortran/ifort",
  \ },
  \ "fortran/ifort": {
  \   "command": "ifort",
  \   "runner": "vimscript",
  \   "outputter": "null",
  \   "exec": [":AsyncRun %c %o -o %s:p:h/a.out %s ; %s:p:h/a.out %a"],
  \   "tempfile": "%{tempname()}.f90",
  \ },
  \ 
  \ "gaussfit": {
  \   "command": $HOME . "/FreeFlex/gauss_fit.exe",
  \   "runner": "vimscript",
  \   "outputter": "null",
  \   "exec": [":AsyncRun %c %s"],
  \ },
  \ }
'''

[[plugins]]
repo = "skywind3000/asyncrun.vim"
on_event = "VimEnter"
hook_source = '''
  " # Open quickfix window automatically.
  let g:asyncrun_open = 10

  " # Alternative make command.
  " # Changing global cwd to the project root in advance
  " # is required for error/warning jump.
  command! -bang -nargs=* Make AsyncRun -program=make -cwd=<root> @ <args>

  " # Open quickfix window automatically without focusing on it.
  augroup AsyncRunCmd
    autocmd!
    autocmd User AsyncRunStart call <SID>QuickfixToggleVertical(100,1)
  augroup END

  " # Copied from asyncrun#quickfix_toggle.
  " # Vertical split. First argument is window width.
  function! s:QuickfixToggleVertical(size, ...)
    let l:mode = (a:0 == 0)? 2 : (a:1)
    function! s:WindowCheck(mode)
      if &buftype == 'quickfix'
        let s:quickfix_open = 1
        return
      endif
      if a:mode == 0
        let w:quickfix_save = winsaveview()
      else
        if exists('w:quickfix_save')
          call winrestview(w:quickfix_save)
          unlet w:quickfix_save
        endif
      endif
    endfunc
    let s:quickfix_open = 0
    let l:winnr = winnr()			
    noautocmd windo call s:WindowCheck(0)
    noautocmd silent! exec ''.l:winnr.'wincmd w'
    if l:mode == 0
      if s:quickfix_open != 0
        silent! cclose
      endif
    elseif l:mode == 1
      if s:quickfix_open == 0
        exec 'vertical botright copen '. ((a:size > 0)? a:size : ' ')
        wincmd k
      endif
    elseif l:mode == 2
      if s:quickfix_open == 0
        exec 'vertical botright copen '. ((a:size > 0)? a:size : ' ')
        wincmd k
      else
        silent! cclose
      endif
    endif
    noautocmd windo call s:WindowCheck(1)
    noautocmd silent! exec ''.l:winnr.'wincmd w'
  endfunc
'''

#===============================================================================
#===============================================================================
# asyncomplete.vim

[[plugins]]
repo = "prabirshrestha/asyncomplete.vim"
on_event = "VimEnter"
hook_add = '''
  augroup AsyncompCmd
    autocmd!
  augroup END

  let g:asyncomplete_enable_for_all = 0
'''
hook_source = '''
  " # Avoid ins completion menu messages.
  set shortmess+=c

  " # Disable fuzzy match.
  let g:asyncomplete_smart_completion = 0

  " # Output log.
  " # let g:asyncomplete_log_file =

  " # Close completion menu when starting a new line.
  inoremap <expr> <RETURN> pumvisible() ? "<C-y><RETURN>" : "<RETURN>"
'''
hook_post_source = '''
  " # Filetype whitelist.
  let s:AsyncompleteEnableFTList = ["vim","toml"]

  " # Enable asyncomplete for filetypes in whitelist.
  function! s:AsyncompleteEnableForFT()

    " # Search whitelist for current filetype.
    for ft in s:AsyncompleteEnableFTList
      if (&filetype ==# ft)
        call asyncomplete#enable_for_buffer()
        return
      endif
    endfor

  endfunction

  " # Not triggered when entering the command line window.
  autocmd AsyncompCmd BufEnter * call <SID>AsyncompleteEnableForFT()

  " # Autocmd is not executed for the first file.
  call <SID>AsyncompleteEnableForFT()
'''

# Autocomplete "syntax".
[[plugins]]
repo = "prabirshrestha/asyncomplete-necosyntax.vim"
on_event = "VimEnter"
hook_source = '''
  autocmd AsyncompCmd User asyncomplete_setup call asyncomplete#register_source(
  \ asyncomplete#sources#necosyntax#get_source_options({
  \   "name": "necosyntax",
  \   "whitelist": [''],
  \   "priority": 0,
  \   "completor": function('asyncomplete#sources#necosyntax#completor'),
  \ })
  \ )
'''

# Autocomplete "vim".
[[plugins]]
repo = "prabirshrestha/asyncomplete-necovim.vim"
on_event = "VimEnter"
hook_source = '''
  autocmd AsyncompCmd User asyncomplete_setup call asyncomplete#register_source(
  \ asyncomplete#sources#necovim#get_source_options({
  \   "name": "necovim",
  \   "whitelist": ['vim'],
  \   "priority": 6,
  \   "completor": function('asyncomplete#sources#necovim#completor'),
  \ })
  \ )
'''

# Autocomplete "snippet".
[[plugins]]
repo = "prabirshrestha/asyncomplete-neosnippet.vim"
on_event = "VimEnter"
hook_source = '''
  autocmd AsyncompCmd User asyncomplete_setup call asyncomplete#register_source(
  \ asyncomplete#sources#neosnippet#get_source_options({
  \   "name": "neosnippet",
  \   "priority": 10,
  \   "whitelist": ['*'],
  \   "completor": function('asyncomplete#sources#neosnippet#completor'),
  \ })
  \ )
'''

# Source for "syntax".
[[plugins]]
repo = "Shougo/neco-syntax"
on_event = "VimEnter"

# Source for "vim".
[[plugins]]
repo = "Shougo/neco-vim"
on_event = "VimEnter"

#===============================================================================
#===============================================================================
# neosnippet.vim

[[plugins]]
repo = "Shougo/neosnippet.vim"
on_event = "VimEnter"
hook_add = '''
  augroup NeosnipCmd
    autocmd!
  augroup END

  " # Set noexpandtab when editing snippets.
  autocmd NeosnipCmd BufEnter * call <SID>NeosnippetSetNoExpandtab()

  function! s:NeosnippetSetNoExpandtab()
    if (&filetype ==# "neosnippet")
      setl noexpandtab
    endif
  endfunction
'''
hook_source = '''
  " # Disable default snippets.
  let g:neosnippet#disable_runtime_snippets = {
  \ "_": 1
  \ }

  let g:neosnippet#snippets_directory = "~/dotfiles/snippets/"

  command! Snip NeoSnippetEdit -split -vertical -direction=belowright

  " # Plugin key-mappings.
  " # Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  imap <C-j> <Plug>(neosnippet_expand_or_jump)
  smap <C-j> <Plug>(neosnippet_expand_or_jump)
  xmap <C-j> <Plug>(neosnippet_expand_target)

  " # SuperTab like snippets behavior.
  " # Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  "# imap <expr><TAB>
  " # \ pumvisible() ? "\<C-n>" :
  " # \ neosnippet#expandable_or_jumpable() ?
  " # \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " # For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

# Default snippets for neosnippet.vim.
[[plugins]]
repo = "Shougo/neosnippet-snippets"
on_source = ["neosnippet.vim"]

#===============================================================================
#===============================================================================
# TOML syntax highlight.

# Detect code blocks and their filetypes.
[[plugins]]
repo = "Shougo/context_filetype.vim"
on_ft = "toml"

# Set the buffer filetype according to the context.
[[plugins]]
repo = "osyo-manga/vim-precious"
depends = ["context_filetype.vim"]
on_ft = "toml"
hook_source = '''
  " # Enable switching filetype automatically.
  " # Required for avoiding switching in 'help'.
  let g:precious_enable_switch_CursorMoved = {
  \   "*": 0,
  \   "toml": 1,
  \ }
'''

# Enable syntax highlight of filetype TOML.
[[plugins]]
repo = "cespare/vim-toml"
on_ft = "toml"
